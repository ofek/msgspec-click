{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"msgspec-click","text":"CI/CD Docs Package Meta <p>This is a library for generating Click options from msgspec types.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install msgspec-click\n</code></pre>"},{"location":"#license","title":"License","text":"<p><code>msgspec-click</code> is distributed under the terms of the MIT license.</p>"},{"location":"#navigation","title":"Navigation","text":"<p>Desktop readers can use special keyboard shortcuts:</p> Keys Action <ul><li>, (comma)</li><li>p</li></ul> Navigate to the \"previous\" page <ul><li>. (period)</li><li>n</li></ul> Navigate to the \"next\" page <ul><li>/</li><li>s</li></ul> Display the search modal"},{"location":"api/","title":"API","text":""},{"location":"api/#msgspec_click.generate_options","title":"<code>generate_options(struct: type[msgspec.Struct]) -&gt; list[click.Option]</code>","text":"<p>Parameters:</p> Name Type Description Default <code>struct</code> <code>type[Struct]</code> <p>The msgspec.Struct type with which to generate options.</p> required <p>Returns:</p> Type Description <code>list[Option]</code> <p>A list of click.Option instances.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<p>Fixed:</p> <ul> <li>Distribute a <code>py.typed</code> file</li> </ul>"},{"location":"changelog/#020-2024-09-19","title":"0.2.0 - 2024-09-19","text":"<p>Added:</p> <ul> <li>Support <code>dict</code></li> <li>Support <code>typing.TypedDict</code></li> </ul>"},{"location":"changelog/#010-2024-09-18","title":"0.1.0 - 2024-09-18","text":"<p>This is the initial public release.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#example","title":"Example","text":"<p>Here, we illustrate how to use the <code>generate_options</code> function on a <code>msgspec.Struct</code> type. The <code>click.Option</code> instances it generates produce values that may be used to instantiate the type.</p>  script.py <pre><code>from __future__ import annotations\n\nfrom typing import Annotated\n\nimport click\nfrom msgspec import Meta, Struct, convert\nfrom msgspec_click import generate_options\n\n\nclass Connection(Struct):\n    user: Annotated[\n        str,\n        Meta(\n            extra={\n                \"help\": \"The user's name\",\n                \"params\": [\"-u\", \"--user\"],\n            }\n        )\n    ] = \"\"\n    password: Annotated[\n        str,\n        Meta(\n            extra={\n                \"help\": \"The user's password\",\n                \"params\": [\"-p\", \"--pass\"],\n                \"prompt\": True,\n                \"hide_input\": True,\n                \"confirmation_prompt\": True,\n            }\n        )\n    ] = \"\"\n    headers: Annotated[list[str], Meta(extra={\"params\": [\"-H\"]})] = []\n    timeout: float = 10.0\n    allow_insecure: bool = False\n\n\n@click.command()\ndef command(**kwargs) -&gt; None:\n    connection = convert(kwargs, Connection)\n    print(connection)\n\n\ncommand.params.extend(generate_options(Connection))\ncommand()\n</code></pre> <p>You can view the help text like so:</p> <pre><code>$ python script.py --help\nUsage: script.py [OPTIONS]\n\nOptions:\n  -u, --user TEXT   The user's name\n  -p, --pass TEXT   The user's password\n  -H LIST\n  --timeout FLOAT\n  --allow-insecure\n  --help            Show this message and exit.\n</code></pre> <p>Running the script with <code>secret</code> as the password produces the following output:</p> <pre><code>$ python script.py --user alice -H \"Key: Value\"\nPassword []:\nRepeat for confirmation:\nConnection(user='alice', password='secret', headers=['Key: Value'], timeout=10.0, allow_insecure=False)\n</code></pre>"},{"location":"usage/#how-it-works","title":"How it works","text":"<p>The type of each field is used to determine the appropriate type of the associated option. Types may be annotated with a <code>msgspec.Meta</code> instance to configure the option. All keys in the <code>extra</code> dictionary are passed directly to the <code>click.Option</code> constructor as keyword arguments, except for the <code>params</code> key which is extracted and passed as an argument.</p> <p>If the <code>params</code> key is not set, then the name of the field is used as the only option parameter e.g. <code>some_field</code> would become <code>--some-field</code>. If the key is set but does not contain the expected flag name nor does it contain the field name, then the field name is appended to the list of parameters to force Click to use the field name as the option name without interfering with the chosen parameters.</p> <p>If the <code>default</code> key is set then it is used as the default value for the option with a fallback to the default value of the field. If a field has no default value, then <code>required</code> is set to <code>True</code> for the option.</p>"},{"location":"usage/#supported-types","title":"Supported types","text":""},{"location":"usage/#primitive-types","title":"Primitive types","text":"Type Behavior <code>str</code> N/A <code>bool</code> The <code>is_flag</code> key is set to <code>True</code>. <code>int</code> If the <code>count</code> key is not set to <code>True</code> then the <code>type</code> key is set to <code>int</code>. Otherwise, the <code>default</code> key is set to <code>[]</code> to satisfy what Click expects for such repeatable options like <code>-vvv</code>. <code>float</code> The <code>type</code> key is set to <code>float</code>."},{"location":"usage/#collection-types","title":"Collection types","text":"Type Behavior <code>list</code> The <code>type</code> key is set to item type and the <code>cls</code> is set to a <code>click.Option</code> subclass that only converts the final value to the proper type. If the <code>nargs</code> setting is not defined then <code>multiple</code> will be set to <code>True</code>. All of the primitive types are supported as items. If the item type is not defined or is <code>typing.Any</code> then the type is considered <code>str</code>. <code>tuple</code> Both standard and variadic forms are supported. If the standard form (e.g. <code>tuple[str, int]</code>) is used then the <code>type</code> key is set to <code>click.Tuple</code> and <code>nargs</code> is set to the number of items. If the variadic form (e.g. <code>tuple[str, ...]</code>) is used then the <code>type</code> key is set to <code>click.Tuple</code>, and the <code>nargs</code> key must already be defined. All of the primitive types are supported as items. If an item type is not defined or is <code>typing.Any</code> then the type is considered <code>str</code>. <code>dict</code> The <code>type</code> key is set to <code>click.Tuple</code> with the type of the key and value, <code>multiple</code> is set to <code>True</code> and the <code>cls</code> is set to a <code>click.Option</code> subclass that only converts the final value to the proper type. The key type must be <code>str</code> but values support all of the primitive types. If the value type is <code>typing.Any</code> then the type is considered <code>str</code>. <code>TypedDict</code> The <code>type</code> key is set to a 2-ary <code>click.Tuple</code> with the first item being a <code>click.Choice</code> constructed from the keys of the dictionary and the second item set to <code>str</code>. As such, the type of each value in the <code>typing.TypedDict</code> must be <code>str</code>. The <code>multiple</code> key is set to <code>True</code> and the <code>cls</code> is set to a <code>click.Option</code> subclass that only converts the final value to the proper type."},{"location":"usage/#complex-types","title":"Complex types","text":"Type Behavior <code>Union</code> Only <code>TYPE_DEF | None</code> union types are supported i.e. exactly 2 types with the final being <code>None</code>. This is to allow the default value being <code>None</code> for easily checking if options were set by the user. The first type may be any supported type except another union. <code>Literal</code> The <code>type</code> key is set to <code>click.Choice</code> with the literal's values. Only <code>str</code> literals are supported."},{"location":"usage/#caveats","title":"Caveats","text":"<p>Type annotations that are not supported by the Python version at runtime will not work. For example, subscripting built-in types like <code>list[int]</code> became supported in Python 3.9 and using the <code>|</code> operator for unions became supported in Python 3.10.</p> <p>Although <code>from __future__ import annotations</code> may hide these runtime errors due to postponed evaluation of annotations, it does not change the supported syntax of the interpreter.</p>"}]}